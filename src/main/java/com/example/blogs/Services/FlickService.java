package com.example.blogs.Services;


import com.example.blogs.AIAgents.Flick;
import com.example.blogs.controllers.FlickController;
import com.example.blogs.dtos.PostDTO;
import com.example.blogs.models.Comment;
import com.example.blogs.models.Post;
import com.example.blogs.repositories.CommentRepository;
import com.example.blogs.repositories.PostRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.Random;

@SuppressWarnings("unused")

@Service
public class FlickService {

    @Autowired
    private PostRepository postRepository;

    @Autowired
    private Flick flick;
    
    @Autowired
    private CommentRepository commentRepository;
    
    private Random random = new Random();

    /**
     * Creates and saves a new post generated by Flick
     */
    public void poster() {
        Post post1 = new Post();
        PostDTO postDTO = flick.generatePost();
        post1.setAuthor("Flick");
        post1.setContent(postDTO.getContent());
        post1.setTitle(postDTO.getTitle());
        post1.setLikesCount(0);
        postRepository.save(post1);
    }
    
    /**
     * Makes Flick like a random post based on its interests and personality
     * 
     * @return A String describing what happened
     */
    public String likePost() {
        // Get all posts except those created by Flick
        List<Post> allPosts = postRepository.findAll();
        List<Post> postsNotByFlick = allPosts.stream()
            .filter(post -> !"Flick".equals(post.getAuthor()))
            .toList();
            
        if (postsNotByFlick.isEmpty()) {
            return "There are no posts for Flick to like."; 
        }
        
        // Let Flick choose a post to like
        int likedPostId = flick.likeRandomPost(postsNotByFlick);
        
        if (likedPostId > 0) {
            // Get the post and increment likes
            Post likedPost = postRepository.findById(likedPostId).orElse(null);
            if (likedPost != null) {
                likedPost.setLikesCount(likedPost.getLikesCount() + 1);
                postRepository.save(likedPost);
                return "Flick liked the post: \"" + likedPost.getTitle() + "\" by " + likedPost.getAuthor();
            }
        }
        
        return "Flick couldn't find a post to like."; 
    }
    
    /**
     * Makes Flick randomly decide whether to create a new post or like an existing one
     * 
     * @return A description of what Flick did
     */
    public String randomAction() {
        // Get all posts
        List<Post> allPosts = postRepository.findAll();
        
        // If there are no posts or very few posts, always create a new post
        if (allPosts.size() < 3) {
            poster();
            return "Flick created a new post since there weren't enough existing posts.";
        }
        
        // Randomly decide whether to post or like (50% chance each)
        boolean shouldPost = random.nextBoolean();
        
        if (shouldPost) {
            poster();
            return "Flick decided to create a new post.";
        } else {
            return likePost();
        }
    }
    
    /**
     * Makes Flick comment on a specific post
     * 
     * @param postId The ID of the post to comment on
     * @return A message describing what happened
     */
    public String commentOnPost(int postId) {
        // Find the post by ID
        Optional<Post> optionalPost = postRepository.findById(postId);
        if (!optionalPost.isPresent()) {
            return "Could not find post with ID: " + postId;
        }
        
        Post post = optionalPost.get();
        
        // Don't comment on Flick's own posts
        if ("Flick".equals(post.getAuthor())) {
            return "Flick doesn't want to comment on their own post.";
        }
        
        // Generate a comment using Flick's personality
        String commentContent = flick.generateComment(post);
        
        // Create and save the comment
        Comment comment = new Comment();
        comment.setContent(commentContent);
        comment.setAuthor("Flick");
        comment.setPost(post);
        comment.setCreatedAt(LocalDateTime.now());
        
        commentRepository.save(comment);
        
        return "Flick commented on post: \"" + post.getTitle() + "\": " + commentContent;
    }
    
    /**
     * Makes Flick comment on a randomly selected post
     * 
     * @return A message describing what happened
     */
    public String commentOnRandomPost() {
        // Get all posts not created by Flick
        List<Post> allPosts = postRepository.findAll();
        List<Post> postsNotByFlick = allPosts.stream()
            .filter(post -> !"Flick".equals(post.getAuthor()))
            .toList();
            
        if (postsNotByFlick.isEmpty()) {
            return "There are no posts for Flick to comment on.";
        }
        
        // Select a random post to comment on
        int randomIndex = random.nextInt(postsNotByFlick.size());
        Post randomPost = postsNotByFlick.get(randomIndex);
        
        // Comment on the selected post
        return commentOnPost(randomPost.getId());
    }
}
